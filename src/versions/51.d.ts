export interface LuaConstants {
    VERSION: string;
    VERSION_NUM: number;
    COPYRIGHT: string;
    AUTHORS: string;
    MULTRET: number;
    REGISTRYINDEX: number;
    ENVIRONINDEX: number;
    GLOBALSINDEX: number;
    OK: number;
    YIELD: number;
    ERRRUN: number;
    ERRSYNTAX: number;
    ERRMEM: number;
    ERRERR: number;
    TNONE: number;
    TNIL: number;
    TBOOLEAN: number;
    TLIGHTUSERDATA: number;
    TNUMBER: number;
    TSTRING: number;
    TTABLE: number;
    TFUNCTION: number;
    TUSERDATA: number;
    TTHREAD: number;
    MINSTACK: number;
    GCSTOP: number;
    GCRESTART: number;
    GCCOLLECT: number;
    GCCOUNT: number;
    GCCOUNTB: number;
    GCSTEP: number;
    GCSETPAUSE: number;
    GCSETSTEPMUL: number;
    GCISRUNNING: number;
}

export class LuaState {
    call(nargs: number, nresults: number): void;
    checkStack(size: number): boolean;
    close(): void;
    concat(n: number): void;
    createTable(narr: number, nrec: number): void;
    error(): void;
    getMetatable(index: number): boolean;
    getTop(): number;
    insert(index: number): void;
    isBoolean(index: number): boolean;
    isJSFunction(index: number): boolean;
    isFunction(index: number): boolean;
    isLightUserdata(index: number): boolean;
    isNil(index: number): boolean;
    isNone(index: number): boolean;
    isNoneOrNil(index: number): boolean;
    isNumber(index: number): boolean;
    isString(index: number): boolean;
    isTable(index: number): boolean;
    isThread(index: number): boolean;
    isUserdata(index: number): boolean;
    newTable(): void;
    next(index: number): void;
    pop(n: number): void;
    pushBoolean(value: boolean): void;
    pushJSClosure(func: Function, n: number): void;
    pushJSFunction(func: Function): void;
    pushInteger(value: number): void;
    pushString(value: string): void;
    pushValue(index: number): void;
    rawEqual(index1: number, index2: number): boolean;
    rawSet(index: number): void;
    register(func: Function): void;
    remove(index: number): void;
    replace(index: number): void;
    resume(index: number): void;
    setField(index: number, key: string): void;
    setGlobal(name: string): void;
    setMetatable(index: number): void;
    setTable(index: number): void;
    setTop(index: number): void;
    status(): number;
    toBoolean(index: number): boolean;
    toJSFunction(index: number): Function | null;
    toInteger(index: number): number;
    toNumber(index: number): number;
    toString(index: number): string;
    type(index: number): number;
    typeName(index: number): string;
    upValueIndex(index: number): number;
    getUpValue(index: number, n: number): string;
    setUpValue(index: number, n: number): string;
    equal(index1: number, index2: number): boolean;
    gc(option: number, data: number): number;
    getFenv(index: number): void;
    getField(index: number, key: string): void;
    getGlobal(name: string): void;
    getTable(index: number): void;
    lessThan(index1: number, index2: number): boolean;
    objLen(index: number): number;
    rawGet(index: number): void;
    rawGeti(index: number, i: number): void;
    rawSeti(index: number, i: number): void;
    setFenv(index: number): void;

    doString(str: string): string | null;
    doFile(filename: string): string | null;
    openLibs(): void;
}

// Export the LUA constants object
export const LUA: LuaConstants;
